# Daily Coding Problem July 25 2021

# [Easy] -- Google

# A unival tree (which stands for "universal value") is a tree where all nodes under it have the same value.

# Given the root to a binary tree, count the number of unival subtrees.

# ! Example: 
#    0
#   / \
#  1   0
#     / \
#    1   0
#   / \
#  1   1

#  Should return 5 --> each of the leaves is 1 plus the tree of all 1's so 5.

# Binary Tree Node class
class Node:

    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
    
# Determines if a Tree is a unival tree (they all have same value or is leaf)
# This entire function got generated by GitHub Co-pilot wtf ...
def isUnivalTree(node: Node):
    if node is None:
        return True
    if node.left is None and node.right is None:
        return True
    if node.left is not None and node.right is not None:
        return node.val == node.left.val and node.val == node.right.val and isUnivalTree(node.left) and isUnivalTree(node.right)
    if node.left is not None:
        return node.val == node.left.val and isUnivalTree(node.left)
    if node.right is not None:
        return node.val == node.right.val and isUnivalTree(node.right)
    return False

# Gets the number of unival trees within this tree
# This entire function got generated by GitHub Co-pilot wtf also...
def univalCount(node: Node):
    if node is None:
        return 0
    else:
        return univalCount(node.left) + univalCount(node.right) + (1 if isUnivalTree(node) else 0)

# Main driver code
def main():
    tree = Node(0, Node(1), Node(0, Node(1, Node(1), Node(1)), Node(0)))
    print(univalCount(tree))

main()